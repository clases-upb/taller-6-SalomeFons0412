/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Random;
import java.util.Scanner;

public class App {
    
    static int[] vectorNumerico;
    static String[] vectorString;
    static Random random = new Random();
    static Scanner scanner = new Scanner(System.in);


    public static void main(String[] args) throws Exception {
        try {
            int tamanoNumerico = random.nextInt(10) + 1;
            int tamanoString = random.nextInt(10) + 1;

            if (tamanoNumerico <= 0 || tamanoString <= 0) {
                System.out.println("Tamaño inválido");
                return;
            }

            vectorNumerico = new int[tamanoNumerico];
            vectorString = new String[tamanoString];

            llenarVectores();

            while (true) {
                System.out.println("Menú:");
                System.out.println("1. Recorrer secuencialmente");
                System.out.println("2. Actualizar");
                System.out.println("3. Añadir");
                System.out.println("4. Borrar");
                System.out.println("5. Ordenar");
                System.out.println("6. Búsqueda");
                System.out.println("7. Salir");

                int opcion = scanner.nextInt();

                switch (opcion) {
                    case 1:
                        recorrerSecuencialmente();
                        break;
                    case 2:
                        actualizar();
                        break;
                    case 3:
                        añadir();
                        break;
                    case 4:
                        borrar();
                        break;
                    case 5:
                        ordenar();
                        break;
                    case 6:
                        búsqueda();
                        break;
                    case 7:
                        System.exit(0);
                        break;
                    default:
                        System.out.println("Opción inválida");
                }
            }
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    /*
     * 1. Implemente un programa en java donde inserte elementos en dos vectores
     * globales de tamaños aleatorios y de contenido aleatorio (uno numérico y otro
     * de Strings). Considere dejar espacios libres en los vectores.
     * 
     * Desde un menú en el programa principal debe considerar cada opción para
     * llamar las siguientes funciones que también debe programar:
     * 
     * a. Recorrer secuencialmente (recibe un true cuando va del primero al último y
     * un false cuando va del último al primero)
     * • De primer elemento a último elemento: Imprime desde el primer elemento
     * hasta el último del vector dado en el parámetro de entrada.
     * • De último elemento al primer elemento: Imprime desde el último elemento
     * hasta el primero del vector dado en el parámetro de entrada.
     * 
     * b. Actualizar: recibe la posición que va a actualizar y el elemento. Al final
     * imprime el vector actualizado.
     * 
     * c. Añadir: después del último: recibe el elemento que va a añadir. Al final
     * imprime el vector actualizado.
     * 
     * d. Borrar: Recibe la posición donde del elemento que va a borrar.
     * 
     * e. Ordenar el vector:
     * • Ascendentemente.
     * • Descendentemente.
     * 
     * f. Búsqueda: Recibe como parámetro el elemento a buscar y devuelve un String
     * separado por el carácter '-', mostrando las posiciones donde se encuentra el
     * elemento.
     */
  


   
    

    public static void llenarVectores() throws Exception {
        try {
            for (int i = 0; i < vectorNumerico.length; i++) {
                vectorNumerico[i] = random.nextInt(100);
            }

            for (int i = 0; i < vectorString.length; i++) {
                vectorString[i] = String.valueOf(random.nextInt(100));
            }
        } catch (Exception e) {
            System.out.println("Error al llenar vectores: " + e.getMessage());
        }
    }

    public static void recorrerSecuencialmente() throws Exception {
        try {
            System.out.println("Recorrer secuencialmente:");
            System.out.println("1. De primer elemento a último");
            System.out.println("2. De último elemento a primer");

            int opcion = scanner.nextInt();

            if (opcion < 1 || opcion > 2) {
                System.out.println("Opción inválida");
                return;
            }

            if (opcion == 1) {
                for (int i = 0; i < vectorNumerico.length; i++) {
                    System.out.print(vectorNumerico[i] + " ");
                }
                System.out.println();

                for (int i = 0; i < vectorString.length; i++) {
                    System.out.print(vectorString[i] + " ");
                }
                System.out.println();
            } else if (opcion == 2) {
                for (int i = vectorNumerico.length - 1; i >= 0; i--) {
                    System.out.print(vectorNumerico[i] + " ");
                }
                System.out.println();

                for (int i = vectorString.length - 1; i >= 0; i--) {
                    System.out.print(vectorString[i] + " ");
                }
                System.out.println();
            }
        } catch (Exception e) {
            System.out.println("Error al recorrer secuencialmente: " + e.getMessage());
        }
    }

    public static void actualizar() throws Exception {
        try {
            System.out.println("Actualizar:");
            System.out.print("Ingrese la posición a actualizar: ");
            int posicion = scanner.nextInt();

            if (posicion < 0 || posicion >= vectorNumerico.length) {
                System.out.println("Posición inválida");
                return;
            }

            System.out.print("Ingrese el nuevo valor: ");
            int nuevoValor = scanner.nextInt();

            vectorNumerico[posicion] = nuevoValor;

            System.out.println("Vector actualizado:");
            for (int i = 0; i < vectorNumerico.length; i++) {
                System.out.print(vectorNumerico[i] + " ");
            }
            System.out.println();
        } catch (Exception e) {
            System.out.println("Error al actualizar: " + e.getMessage());
        }
    }

    public static void añadir() throws Exception {
        try {
            System.out.println("Añadir:");
            System.out .print("Ingrese el nuevo valor: ");
            int nuevoValor = scanner.nextInt();

            int[] nuevoVectorNumerico = new int[vectorNumerico.length + 1];
            for (int i = 0; i < vectorNumerico.length; i++) {
                nuevoVectorNumerico[i] = vectorNumerico[i];
            }
            nuevoVectorNumerico[vectorNumerico.length] = nuevoValor;

            vectorNumerico = nuevoVectorNumerico;

            System.out.println("Vector actualizado:");
            for (int i = 0; i < vectorNumerico.length; i++) {
                System.out.print(vectorNumerico[i] + " ");
            }
            System.out.println();
        } catch (Exception e) {
            System.out.println("Error al añadir: " + e.getMessage());
        }
    }

    public static void borrar() throws Exception {
        try {
            System.out.println("Borrar:");
            System.out.print("Ingrese la posición a borrar: ");
            int posicion = scanner.nextInt();

            if (posicion < 0 || posicion >= vectorNumerico.length) {
                System.out.println("Posición inválida");
                return;
            }

            int[] nuevoVectorNumerico = new int[vectorNumerico.length - 1];
            for (int i = 0; i < posicion; i++) {
                nuevoVectorNumerico[i] = vectorNumerico[i];
            }
            for (int i = posicion; i < vectorNumerico.length - 1; i++) {
                nuevoVectorNumerico[i] = vectorNumerico[i + 1];
            }

            vectorNumerico = nuevoVectorNumerico;

            System.out.println("Vector actualizado:");
            for (int i = 0; i < vectorNumerico.length; i++) {
                System.out.print(vectorNumerico[i] + " ");
            }
            System.out.println();
        } catch (Exception e) {
            System.out.println("Error al borrar: " + e.getMessage());
        }
    }

    public static void ordenar() throws Exception {
        try {
            System.out.println("Ordenar:");
            System.out.println("1. Ascendentemente");
            System.out.println("2. Descendentemente");

            int opcion = scanner.nextInt();

            if (opcion < 1 || opcion > 2) {
                System.out.println("Opción inválida");
                return;
            }

            if (opcion == 1) {
                for (int i = 0; i < vectorNumerico.length; i++) {
                    for (int j = i + 1; j < vectorNumerico.length; j++) {
                        if (vectorNumerico[i] > vectorNumerico[j]) {
                            int temp = vectorNumerico[i];
                            vectorNumerico[i] = vectorNumerico[j];
                            vectorNumerico[j] = temp;
                        }
                    }
                }
            } else if (opcion == 2) {
                for (int i = 0; i < vectorNumerico.length; i++) {
                    for (int j = i + 1; j < vectorNumerico.length; j++) {
                        if (vectorNumerico[i] < vectorNumerico[j]) {
                            int temp = vectorNumerico[i];
                            vectorNumerico[i] = vectorNumerico[j];
                            vectorNumerico[j] = temp;
                        }
                    }
                }
            }

            System.out.println("Vector ordenado:");
            for (int i = 0; i < vectorNumerico.length; i++) {
                System.out.print(vectorNumerico[i] + " ");
            }
            System.out.println();
        } catch (Exception e) {
            System.out.println("Error al ordenar: " + e.getMessage());
        }
    }

    public static void búsqueda() throws Exception {
        try {
            System.out.println("Búsqueda:");
            System.out.print("Ingrese el elemento a buscar: ");
            int elemento = scanner.nextInt();

            String posiciones = "";

            for (int i = 0; i < vectorNumerico.length; i++) {
                if (vectorNumerico[i] == elemento) {
                    posiciones += i + "-";
                }
            }

            if (posiciones.isEmpty()) {
                System.out.println("Elemento no encontrado");
            } else {
                System.out.println("Elemento encontrado en posiciones: " + posiciones.substring(0, posiciones.length() - 1));
            }
        } catch (Exception e) {
            System.out.println("Error al buscar: " + e.getMessage());
        }
    }


    /*
     * 2. Escriba un algoritmo que calcule aleatoriamente N temperaturas, las lleve
     * a un vector y luego calcule su media, cuántas temperaturas están por encima
     * de la media y cuántas por debajo.
     */
    public static String Calcular_temperaturas (int N) throws Exception{
        try {
           String resultado="";
           final int cien=100;
           double sumatoria=0, aleatorio=0, media=0;
           int encima=0, debajo=0;
           

           if (N <= 0){
                return "No se aceptan valores menores o iguales a cero";
           } 
           else {
                double [] v_temperaturas = new double [N];
                for(int fil = 0; fil <= N-1; fil++){
                    aleatorio= Math.random()*cien;
                    v_temperaturas[fil] = aleatorio;
                    sumatoria += v_temperaturas[fil];

                }
                
                media = sumatoria/N;

                for(int fil = 0; fil <= N-1; fil++){
                    resultado+= v_temperaturas[fil] + " ";

                    if(v_temperaturas[fil] > media){
                        encima++;
                    }else if (v_temperaturas[fil] < media){
                        debajo++;
                    }
                }


                resultado += "Las temperaturas por encima de la media: "+ encima + "\n"+"Las temperaturas por debajo: "+ debajo+
                                "\n" +"La media es: " + media;

                return resultado;
           }
        
        } 
        catch (Exception e) {
            throw new Exception("ocurrio un error en Calcular_temperatura: \n" + e);
        }
    }
    /*
     * 3. Cargue un vector a partir de un archivo de palabras, con mínimo 10
     * palabras. Ordene el vector de manera ascendente y luego de forma descendente.
     * 
     * Escriba el vector inicial sin ordenar, los vectores ordenados.
     */

     public static String Orden_palabras (String archivo) throws Exception{
        try {
            String texto = "";
            int contador = 0;

            BufferedReader Buff_palabras = new BufferedReader(new FileReader(archivo));
            String linea = Buff_palabras.readLine();

            if (linea == null){
                return "Archivo vacio";
            }else{
                while (linea != null) {
                    contador++;

                    linea = Buff_palabras.readLine();

                }
                Buff_palabras.close();

                    Buff_palabras = new BufferedReader(new FileReader(archivo));             
                    String[] vector_palabras = new String[contador];
                    for (int pos = 0; pos < vector_palabras.length; pos++) {
                        vector_palabras[pos] = Buff_palabras.readLine();
                    }
                    Buff_palabras.close();

                    texto +=  "\n vector ordenado de forma ascendente: \n";

                    for (int pos=0; pos < vector_palabras.length ; pos++){
                        texto += vector_palabras[pos] + "\n";
                    }

                    texto +=  "\n vector ordenado de forma descendente: \n";
                    for (int pos = vector_palabras.length-1 ; pos >= 0; pos--) {
                        texto += vector_palabras[pos] + "\n";
                    }


                return texto;
            }
            
        } catch (Exception e) {
            throw new Exception("ocurrio un error en Orden_palabras: \n" + e);
        }
    }

    /*
     * 4. Escriba un algoritmo que cree un vector de N elementos (el N es dado por
     * el usuario) de números short aleatorios positivos mayores que cero, y luego
     * le pregunte al usuario qué posición quiere eliminar. Luego por un menú
     * presente las opciones: Dejar la casilla en 0 o desplazar los elementos de
     * manera que el cero quede en la última posición del vector. Después de la
     * operación mostrará el vector cómo va quedando y volverá a preguntar qué
     * posición quiere borrar y mostrará nuevamente el menú. En el menú aparecerá la
     * opción para terminar el programa.
     */
    public static void manipularVector() throws Exception {
        try {
            Scanner scanner = new Scanner(System.in);
            Random random = new Random();

            System.out.print("Ingrese el tamaño del vector (N): ");
            int N = scanner.nextInt();
            short[] vector = new short[N];

            for (int i = 0; i < N; i++) {
                vector[i] = (short) (random.nextInt(Short.MAX_VALUE) + 1);
            }

            while (true) {
                System.out.print("Vector actual: ");
                for (short num : vector) {
                    System.out.print(num + " ");
                }
                System.out.println();

                System.out.print("Ingrese la posición que desea eliminar (0 a " + (N - 1) + "): ");
                int posicion = scanner.nextInt();

                if (posicion < 0 || posicion >= N) {
                    System.out.println("Posición inválida. Intente nuevamente.");
                    continue;
                }

                System.out.println("Elija una opción:");
                System.out.println("1. Dejar la casilla en 0");
                System.out.println("2. Desplazar elementos y poner 0 en la última posición");
                System.out.println("3. Salir");
                int opcion = scanner.nextInt();

                switch (opcion) {
                    case 1:
                        vector[posicion] = 0;
                        break;
                    case 2:
                        for (int i = posicion; i < N - 1; i++) {
                            vector[i] = vector[i + 1];
                        }
                        vector[N - 1] = 0;
                        break;
                    case 3:
                        scanner.close();
                        return;
                    default:
                        System.out.println("Opción inválida. Intente nuevamente.");
                        continue;
                }

                System.out.print("Vector actualizado: ");
                for (short num : vector) {
                    System.out.print(num + " ");
                }
                System.out.println();
            }
        } catch (Exception e) {
            throw new Exception("Error en manipularVector: " + e.getMessage());
        }
    }

    /*
     * 5. Escriba un algoritmo para convertir un número decimal en un número
     * hexadecimal, apoyado en vectores.
     */
    public static void convertirADecimalHexadecimal() throws Exception {
        try {
            Scanner scanner = new Scanner(System.in);

            System.out.print("Ingrese un número decimal positivo: ");
            int decimal = scanner.nextInt();

            if (decimal < 0) {
                throw new Exception("El número debe ser positivo.");
            }

            char[] hexadecimal = new char[8]; 
            int index = 0;

            while (decimal > 0) {
                int remainder = decimal % 16;
                hexadecimal[index++] = (char) (remainder < 10 ? remainder + '0' : remainder - 10 + 'A');
                decimal /= 16;
            }

            System.out.print("Número hexadecimal: ");
            for (int i = index - 1; i >= 0; i--) {
                System.out.print(hexadecimal[i]);
            }
            System.out.println();

            scanner.close();
        } catch (Exception e) {
            throw new Exception("Error en convertirADecimalHexadecimal: " + e.getMessage());
        }
    }

    /*
     * 6. Escriba un algoritmo que solicite al usuario el orden de una matriz
     * cuadrática, implemente su matriz transpuesta (investiga qué es) y la imprima.
     */
    public static void generarMatrizTranspuesta() throws Exception {
        try {
            Scanner scanner = new Scanner(System.in);

            System.out.print("Ingrese el orden de la matriz cuadrática: ");
            int n = scanner.nextInt();
            int[][] matriz = new int[n][n];
            int[][] transpuesta = new int[n][n];

            System.out.println("Ingrese los elementos de la matriz:");
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    matriz[i][j] = scanner.nextInt();
                }
            }

            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    transpuesta[j][i] = matriz[i][j];
                }
            }

            System.out.println("Matriz transpuesta:");
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    System.out.print(transpuesta[i][j] + " ");
                }
                System.out.println();
            }
            scanner.close();
        } catch (Exception e) {
            throw new Exception("Error en generarMatrizTranspuesta: " + e.getMessage());
        }
    }

    /*
     * 7. Escriba un algoritmo que calcule el producto y la división. Los operandos
     * serán la suma de elementos de la diagonal principal y la suma de los
     * elementos de la diagonal secundaria. Los elementos de la matriz deben ser
     * llenados usando la función random para calcular números aleatorios entre 10 y
     * 100.
     */
    public static void calcularProductoYDivision() throws Exception {
        try {
            Scanner scanner = new Scanner(System.in);
            Random random = new Random();

            System.out.print("Ingrese el orden de la matriz cuadrática: ");
            int n = scanner.nextInt();
            int[][] matriz = new int[n][n];
            int sumaDiagonalPrincipal = 0;
            int sumaDiagonalSecundaria = 0;

            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    matriz[i][j] = random.nextInt(91) + 10;
                    if (i == j) {
                        sumaDiagonalPrincipal += matriz[i][j];
                    }
                    if (i + j == n - 1) {
                        sumaDiagonalSecundaria += matriz[i][j];
                    }
                }
            }

            System.out.println("Suma de la diagonal principal: " + sumaDiagonalPrincipal);
            System.out.println("Suma de la diagonal secundaria: " + sumaDiagonalSecundaria);
            System.out.println("Producto: " + (sumaDiagonalPrincipal * sumaDiagonalSecundaria));
            System.out.println("División: " + (sumaDiagonalPrincipal / (double) sumaDiagonalSecundaria));

            scanner.close();
        } catch (Exception e) {
            throw new Exception("Error en calcularProductoYDivision: " + e.getMessage());
        }
    }

    /*
     * 8. Escriba un algoritmo que llene de manera aleatoria una matriz de 100 filas
     * por 3 columnas con Xs y Os. Y mediante un vector cuente el número de Xs y Os
     * en cada fila. Imprima la matriz antes de llenarla, luego de llenarla y el
     * vector con el resultado.
     */
    public static void contarXsOs() throws Exception {
        try {
            Random random = new Random();
            char[][] matriz = new char[100][3];
            int[] conteo = new int[100];

            for (int i = 0; i < 100; i++) {
                for (int j = 0; j < 3; j++) {
                    matriz[i][j] = random.nextBoolean() ? 'X' : 'O';
                }
            }

            System.out.println("Matriz antes de llenar:");
            imprimirMatriz(matriz);

            for (int i = 0; i < 100; i++) {
                int contadorX = 0;
                int contadorO = 0;
                for (int j = 0; j < 3; j++) {
                    if (matriz[i][j] == 'X') contadorX++;
                    if (matriz[i][j] == 'O') contadorO++;
                }
                conteo[i] = contadorX; 
                System.out.println("Fila " + (i + 1) + ": " + contadorX + " Xs y " + contadorO + " Os");
            }

            System.out.println("Conteo de Xs en cada fila:");
            for (int i = 0; i < 100; i++) {
                System.out.println("Fila " + (i + 1) + ": " + conteo[i] + " Xs");
            }
        } catch (Exception e) {
            throw new Exception("Error en contarXsOs: " + e.getMessage());
        }
    }

    public static void imprimirMatriz(char[][] matriz) {
        for (char[] fila : matriz) {
            for (char elemento : fila) {
                System.out.print(elemento + " ");
            }
            System.out.println();
        }
    }

    /*
     * 9. Llene una matriz de 5x5 con números aleatorios entre 1 y 9. En un vector
     * adicional, calcule la cantidad de números repetidos por cada fila y en otro
     * vector la cantidad de números repetidos de cada columna.
     */
    public static void contarRepetidos() throws Exception {
        try {
            Random random = new Random();
            int[][] matriz = new int[5][5];
            int[] repetidosPorFila = new int[5];
            int[] repetidosPorColumna = new int[5];

            for (int i = 0; i < 5; i++) {
                for (int j = 0; j < 5; j++) {
                    matriz[i][j] = random.nextInt(9) + 1;
                }
            }

            for (int i = 0; i < 5; i++) {
                boolean[] vistoFila = new boolean[10];
                boolean[] vistoColumna = new boolean[10];
                for (int j = 0; j < 5; j++) {
                    if (!vistoFila[matriz[i][j]]) {
                        vistoFila[matriz[i][j]] = true;
                    } else {
                        repetidosPorFila[i]++;
                    }
                    if (!vistoColumna[matriz[j][i]]) {
                        vistoColumna[matriz[j][i]] = true;
                    } else {
                        repetidosPorColumna[i]++;
                    }
                }
            }

            System.out.println("Matriz generada:");
            for (int i = 0; i < 5; i++) {
                for (int j = 0; j < 5; j++) {
                    System.out.print(matriz[i][j] + " ");
                }
                System.out.println();
            }

            System.out.println("Repetidos por fila:");
            for (int i = 0; i < 5; i++) {
                System.out.println("Fila " + (i + 1) + ": " + repetidosPorFila[i] + " repetidos");
            }

            System.out.println("Repetidos por columna:");
            for (int i = 0; i < 5; i++) {
                System.out.println("Columna " + (i + 1) + ": " + repetidosPorColumna[i] + " repetidos");
            }
        } catch (Exception e) {
            throw new Exception("Error en contarRepetidos: " + e.getMessage());
        }
    }

}
